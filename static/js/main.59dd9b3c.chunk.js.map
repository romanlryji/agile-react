{"version":3,"sources":["components/InputTodo.js","components/TodoItem.js","components/TodoItems.js","components/TodoContainer.js","App.js","reportWebVitals.js","index.js"],"names":["InputTodo","props","useState","title","inputText","setInputText","InputGroup","className","FormControl","value","onChange","e","console","log","target","placeholder","Button","variant","id","onClick","preventDefault","trim","addTodoFunc","alert","TodoItem","todo","completed","editingMode","setEditingMode","Checkbox","checked","handleCompletedToggleFunc","readOnly","style","fontStyle","color","opacity","textDecoration","onDoubleClick","onKeyDown","key","setNewTitleFunc","deleteTodoFunc","TodoItems","ListGroup","todos","map","Item","TodoContainer","temp","localStorage","getItem","JSON","parse","getInitialTodos","setTodos","getNow","Date","now","useEffect","stringify","setItem","filter","prevState","modified","newTitle","newTodo","uuidv4","created","App","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.59dd9b3c.chunk.js","sourcesContent":["import React, { useState } from \"react\"\r\n\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\nimport Button from 'react-bootstrap/Button'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\n\r\nconst InputTodo = props => {\r\n  const [inputText, setInputText] = useState({\r\n    title: \"\"\r\n  })\r\n\r\n  const onChange = e => {\r\n    console.log(e.target.value)\r\n    setInputText({\r\n      title: e.target.value\r\n    })\r\n  }\r\n\r\n  const addClick = e => {\r\n    e.preventDefault()\r\n    if (inputText.title.trim()) {\r\n      props.addTodoFunc(inputText.title)\r\n      setInputText({\r\n        title: \"\"\r\n      })\r\n    } else {\r\n      alert(\"Enter something please\")\r\n    }\r\n    \r\n    console.log(inputText.title + ' added')\r\n  }\r\n\r\n  return (\r\n    <InputGroup className=\"mb-3\">\r\n      <FormControl\r\n        value={inputText.title}\r\n        onChange={onChange}\r\n        placeholder=\"New Todo Item\"\r\n        aria-label=\"New Todo Item\"\r\n        aria-describedby=\"basic-addon2\"\r\n      />\r\n      <Button variant=\"outline-secondary\" id=\"button-addon2\" onClick={addClick}>\r\n        Add\r\n      </Button>\r\n    </InputGroup>\r\n  )\r\n}\r\n\r\nexport default InputTodo","import { useState } from \"react\"\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nconst TodoItem = props => {\r\n  const { completed, id, title } = props.todo\r\n  const [editingMode, setEditingMode] = useState(false)\r\n\r\n  const enableEditing = () => {\r\n    setEditingMode(true)\r\n  }\r\n\r\n  const handleUpdateDone = e => {\r\n    if (e.key === \"Enter\") {\r\n      setEditingMode(false)\r\n    }\r\n  }\r\n\r\n  const completedStyle = {\r\n    fontStyle: \"italic\",\r\n    color: \"#595959\",\r\n    opacity: 0.4,\r\n    textDecoration: \"line-through\",\r\n  }\r\n\r\n  return (\r\n    <InputGroup>\r\n      <InputGroup.Checkbox aria-label=\"Checkbox for following text input\" checked={completed} onChange={() => props.handleCompletedToggleFunc(id)} />\r\n      <FormControl\r\n        readOnly={!editingMode}\r\n        style={completed ? completedStyle : null}\r\n        value={title}\r\n        onDoubleClick={enableEditing}\r\n        onKeyDown={handleUpdateDone}\r\n        onChange={e => props.setNewTitleFunc(id, e.target.value)}\r\n      />\r\n      <Button\r\n        variant=\"outline-secondary\"\r\n        id=\"button-addon2\"\r\n        onClick={() => { props.deleteTodoFunc(id) }}\r\n      >\r\n        Delete\r\n      </Button>\r\n    </InputGroup>\r\n  )\r\n}\r\n\r\nexport default TodoItem","import ListGroup from 'react-bootstrap/ListGroup'\r\n\r\nimport TodoItem from \"./TodoItem\"\r\n\r\nconst TodoItems = props => {\r\n\r\n\r\n\r\n  return (\r\n\r\n    <ListGroup>\r\n      {props.todos.map(\r\n        todo => (\r\n          <ListGroup.Item key={todo.id}><TodoItem\r\n            key={todo.id}\r\n            todo={todo}\r\n            handleCompletedToggleFunc={props.handleCompletedToggleFunc}\r\n            deleteTodoFunc={props.deleteTodoFunc}\r\n            setNewTitleFunc={props.setNewTitleFunc}\r\n          /></ListGroup.Item>\r\n        ))\r\n      }\r\n      {/* <ListGroup.Item><TodoItem todo={todo1} /></ListGroup.Item>\r\n      <ListGroup.Item><TodoItem todo={todo2} /></ListGroup.Item> */}\r\n    </ListGroup>\r\n  )\r\n}\r\n\r\nexport default TodoItems","import React, { useState, useEffect } from \"react\"\r\nimport { v4 as uuidv4 } from \"uuid\"\r\nimport InputTodo from \"./InputTodo\"\r\nimport TodoItems from \"./TodoItems\"\r\n\r\nconst TodoContainer = () => {\r\n  // let todo1 = {\r\n  //   id: uuidv4(),\r\n  //   title: 'Item1'\r\n  // }\r\n\r\n  // let todo2 = {\r\n  //   id: uuidv4(),\r\n  //   title: 'Item2'\r\n  // }\r\n\r\n  // const [todos, setTodos] = useState([todo1, todo2])\r\n  const [todos, setTodos] = useState(getInitialTodos())\r\n\r\n  // let todos = [todo1, todo2]\r\n\r\n  const handleCompletedToggle = id => {\r\n    setTodos(prevState =>\r\n      prevState.map(todo => {\r\n        if (todo.id === id) {\r\n          return {\r\n            ...todo,\r\n            completed: !todo.completed,\r\n            modified: getNow()\r\n          }\r\n        }\r\n        return todo\r\n      })//.sort((a, b) => a.modified < b.modified)\r\n    )\r\n  }\r\n\r\n  const addTodoItem = title => {\r\n    const newTodo = {\r\n      id: uuidv4(),\r\n      title: title,\r\n      completed: false,\r\n      created: getNow(),\r\n      modified: getNow()\r\n    }\r\n    setTodos([...todos, newTodo])\r\n    // alert((new Date(getNow())).getTimezoneOffset())\r\n  }\r\n\r\n  const delTodoItem = id => {\r\n    setTodos([\r\n      ...todos.filter(todo => {\r\n        return todo.id !== id\r\n      })\r\n    ])\r\n  }\r\n\r\n  const setNewTitle = (id, newTitle) => {\r\n    setTodos(\r\n      todos.map(todo => {\r\n        if (todo.id === id) {\r\n          todo.title = newTitle\r\n        }\r\n        return todo\r\n      })\r\n    )\r\n  }\r\n\r\n  function getNow() {\r\n    return Date.now()\r\n  }\r\n\r\n  function getInitialTodos() {\r\n    const temp = localStorage.getItem(\"todos\")\r\n    const loadedTodos = JSON.parse(temp)\r\n    return loadedTodos || []\r\n  }\r\n\r\n  useEffect(() => {\r\n    const temp = JSON.stringify(todos)\r\n    localStorage.setItem(\"todos\", temp)\r\n  }, [todos])\r\n\r\n  return (\r\n    <div>\r\n      <TodoItems\r\n        todos={todos}\r\n        deleteTodoFunc={delTodoItem}\r\n        handleCompletedToggleFunc={handleCompletedToggle}\r\n        setNewTitleFunc={setNewTitle}\r\n      />\r\n      <InputTodo addTodoFunc={addTodoItem} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoContainer","// import logo from './logo.svg';\r\nimport React, { useState } from 'react';\r\n\r\n// import Navbar from './components/Navbar';\r\n\r\n// import Toast from 'react-bootstrap/Toast';\r\nimport Container from 'react-bootstrap/Container';\r\n// import Button from 'react-bootstrap/Button';\r\n\r\nimport './App.css';\r\nimport TodoContainer from './components/TodoContainer';\r\n\r\n// const ExampleToast = ({ children }) => {\r\n//   const [show, toggleShow] = useState(true);\r\n\r\n//   return (\r\n//     <>\r\n//       {!show && <Button onClick={() => toggleShow(true)}>Show Toast</Button>}\r\n//       <Toast show={show} onClose={() => toggleShow(false)}>\r\n//         <Toast.Header>\r\n//           <strong className=\"mr-auto\">React-Bootstrap</strong>\r\n//         </Toast.Header>\r\n//         <Toast.Body>{children}</Toast.Body>\r\n//       </Toast>\r\n//     </>\r\n//   );\r\n// };\r\n\r\nfunction App() {\r\n  return (\r\n\r\n    <Container className=\"p-3\">\r\n      {/* <h1 className=\"header\">Welcome To React-Bootstrap</h1>\r\n      <ExampleToast>\r\n        We now have Toasts\r\n        <span role=\"img\" aria-label=\"tada\">\r\n          🎉\r\n        </span>\r\n      </ExampleToast> */}\r\n      <TodoContainer />\r\n    </Container>\r\n\r\n\r\n    // <>\r\n    //   <Navbar />\r\n    // </>\r\n    // <div className=\"App\">\r\n    //   <header className=\"App-header\">\r\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n    //     <p>\r\n    //       Edit <code>src/App.js</code> and save to reload.\r\n    //     </p>\r\n    //     <a\r\n    //       className=\"App-link\"\r\n    //       href=\"https://reactjs.org\"\r\n    //       target=\"_blank\"\r\n    //       rel=\"noopener noreferrer\"\r\n    //     >\r\n    //       Learn React\r\n    //     </a>\r\n    //   </header>\r\n    // </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}